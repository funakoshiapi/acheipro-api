// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

#nullable disable

namespace acheipro_api.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("ImageName")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Province")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Telephone")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af58eeaa-9f5b-11ee-8c90-0242ac120002"),
                            Address = "Golfe 2, Rua 3",
                            Country = "Angola",
                            Industry = "Juridicos",
                            Name = "Luanda Legal LLC",
                            Province = "Luanda",
                            Role = "Advogado"
                        },
                        new
                        {
                            Id = new Guid("c0f33166-9f5b-11ee-8c90-0242ac120002"),
                            Address = "Talatona, Rua 6",
                            Country = "Angola",
                            Industry = "Contabilidade",
                            Name = "Contabilistical LLC",
                            Province = "Luanda",
                            Role = "Contabilidade"
                        });
                });

            modelBuilder.Entity("Entities.Models.CompanyData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("CompanyDataId");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("CompanyId");

                    b.Property<string>("CompanyMission")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.HasKey("Id");

                    b.ToTable("CompanyDatas");
                });

            modelBuilder.Entity("Entities.Models.CompanyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ImageId");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("CompanyId");

                    b.Property<string>("ImageName")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.HasKey("Id");

                    b.ToTable("CompanyImages");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("EmployeeId");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f37f3af-7ba0-4365-a98f-924c9a865c8d"),
                            CompanyId = new Guid("af58eeaa-9f5b-11ee-8c90-0242ac120002"),
                            Name = "Felipe Sousa",
                            Position = "Software Developer"
                        },
                        new
                        {
                            Id = new Guid("7437b1bb-21ac-4d65-aaf5-c689da20b50d"),
                            CompanyId = new Guid("c0f33166-9f5b-11ee-8c90-0242ac120002"),
                            Name = "Mbula Matadi",
                            Position = "Director Relacoes Publicas"
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2abecc7a-10d1-45da-b154-8dac7b72ffc3",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "2c1fe9e6-8353-46c7-a2e7-74bcc4d619dc",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "588d3c20-a8e2-413e-85a9-89c406eafc33",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .UseCollation("und-u-ks-level1-kc-true");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.HasOne("Entities.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
